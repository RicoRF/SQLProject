SET ECHO ON
SET LINESIZE 300
SET PAGESIZE 30
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';
SET SERVEROUTPUT ON

-- PROJECT 2 DATABASE

-- Question 1

DROP TABLE MEMBERSHIP CASCADE CONSTRAINTS;
DROP TABLE PRICE CASCADE CONSTRAINTS;
DROP TABLE RENTAL CASCADE CONSTRAINTS;
DROP TABLE GAME CASCADE CONSTRAINTS;
DROP TABLE DETAILRENTAL CASCADE CONSTRAINTS;
DROP TABLE GAMECOPY CASCADE CONSTRAINTS;

CREATE TABLE MEMBERSHIP(
	MEM_NUM CHAR(4) PRIMARY KEY NOT NULL,
	FNAME VARCHAR2(30) NOT NULL,
	LNAME VARCHAR2(30) NOT NULL,
	STREET VARCHAR2(120),
	CITY VARCHAR2(50),
	PROV CHAR(2),
	POSTAL CHAR(7),
	BALANCE NUMBER(10,2),
	CONSTRAINT CKKK_BALANCE CHECK (BALANCE >= 0)
);

CREATE TABLE RENTAL(
	RENT_NUM CHAR(5) PRIMARY KEY NOT NULL,
	RENT_DATE DATE NOT NULL,
	MEM_NUM CHAR(4) NOT NULL
);

CREATE TABLE DETAILRENTAL(
	RENT_NUM CHAR(5) NOT NULL,
	GC_NUM CHAR(6) NOT NULL,
	FEE NUMBER(5,2) NOT NULL,
	DUE_DATE DATE NOT NULL,
	RETURN_DATE DATE,
	DAILY_LATE_FEE NUMBER(5,2) NOT NULL
);

CREATE TABLE GAMECOPY (
	GC_NUM CHAR(6) PRIMARY KEY NOT NULL,
	INDATE DATE NOT NULL,
	GA_NUM CHAR(5) NOT NULL
);

CREATE TABLE GAME(
	GA_NUM CHAR(5) PRIMARY KEY NOT NULL,
	TITLE VARCHAR2(75) NOT NULL,
	YEAR CHAR(4) NOT NULL,
	COST NUMBER(5,2),
	GENRE VARCHAR2(50),
	PRICE_CODE CHAR(2) NOT NULL,
	CONSTRAINT CK_YEAR CHECK (YEAR >= 1970)
);

CREATE TABLE PRICE(
	PRICE_CODE CHAR(2) PRIMARY KEY NOT NULL,
	DESCRIPTION VARCHAR2(20) NOT NULL,
	RENT_FEE NUMBER(5,2) NOT NULL,
	DAILY_LATE_FEE NUMBER(5,2) NOT NULL,
	CONSTRAINT CK_RENT_FEE CHECK (RENT_FEE >= 0),
	CONSTRAINT CK_DAILY_LATE_FEE CHECK (DAILY_LATE_FEE >= 0)
);

ALTER TABLE RENTAL ADD CONSTRAINT FK_MEM_NUM FOREIGN KEY (MEM_NUM) REFERENCES MEMBERSHIP(MEM_NUM);

ALTER TABLE DETAILRENTAL ADD CONSTRAINT FK_RENT_NUM FOREIGN KEY (RENT_NUM) REFERENCES RENTAL(RENT_NUM);

ALTER TABLE DETAILRENTAL ADD CONSTRAINT FK_GC_NUM FOREIGN KEY (GC_NUM) REFERENCES GAMECOPY(GC_NUM);

ALTER TABLE DETAILRENTAL ADD CONSTRAINT PK_DETAILRENTAL PRIMARY KEY (RENT_NUM, GC_NUM);

ALTER TABLE GAMECOPY ADD CONSTRAINT FK_GA_NUM FOREIGN KEY (GA_NUM) REFERENCES GAME(GA_NUM);

ALTER TABLE GAME ADD CONSTRAINT FK_PRICE_CODE FOREIGN KEY (PRICE_CODE) REFERENCES PRICE(PRICE_CODE);

-- Question 2

INSERT INTO PRICE (PRICE_CODE, DESCRIPTION, RENT_FEE, DAILY_LATE_FEE) VALUES(
1, 'Standard', 2, 1.5
);

INSERT INTO PRICE (PRICE_CODE, DESCRIPTION, RENT_FEE, DAILY_LATE_FEE) VALUES(
2, 'New Release', 3.5, 3
);

INSERT INTO PRICE (PRICE_CODE, DESCRIPTION, RENT_FEE, DAILY_LATE_FEE) VALUES(
3, 'Discount', 1.5, 1
);

INSERT INTO PRICE (PRICE_CODE, DESCRIPTION, RENT_FEE, DAILY_LATE_FEE) VALUES(
4, 'Weekly Special', 1, 0.5
);

INSERT INTO GAME (GA_NUM, TITLE, YEAR, COST, GENRE, PRICE_CODE) VALUES(
1234, 'BATTLEFIELD 1', 2016, 79.99, 'ACTION', 1
);

INSERT INTO GAME (GA_NUM, TITLE, YEAR, COST, GENRE, PRICE_CODE) VALUES(
1235, 'MASS Effect Andromeda', 2017, 89.99, 'ACTION', 2
);

INSERT INTO GAME (GA_NUM, TITLE, YEAR, COST, GENRE, PRICE_CODE) VALUES(
1236, 'EverQuest', 1999, 59.95, 'RPG', 3
);

INSERT INTO GAME (GA_NUM, TITLE, YEAR, COST, GENRE, PRICE_CODE) VALUES(
1237, 'Fable II', 2010, 49.95, 'RPG', 3
);

INSERT INTO GAME (GA_NUM, TITLE, YEAR, COST, GENRE, PRICE_CODE) VALUES(
1238, 'Mario Kart 8 Deluxe', 2017, 89.95, 'RACING', 2
);

INSERT INTO GAME (GA_NUM, TITLE, YEAR, COST, GENRE, PRICE_CODE) VALUES(
1239, 'Blur', 2010, 29.49, 'RACING', 1
);

INSERT INTO GAME (GA_NUM, TITLE, YEAR, COST, GENRE, PRICE_CODE) VALUES(
1245, 'Grand Theft Auto V', 2012, 45.49, 'ACTION', 1
);

INSERT INTO GAME (GA_NUM, TITLE, YEAR, COST, GENRE, PRICE_CODE) VALUES(
1246, 'Halo 4', 2012, 58.29, 'ACTION', 1
);

INSERT INTO GAME (GA_NUM, TITLE, YEAR, COST, GENRE, PRICE_CODE) VALUES(
1247, 'Wipeout 3', 2012, 58.29, 'SIMULATION', 1
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
34341, '2017-01-22', 1235
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
34342, '2017-01-22', 1235
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
34366, '1999-03-02', 1236
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
34367, '1999-03-02', 1236
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
34368, '1999-03-02', 1236
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
34369, '1999-03-02', 1236
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
44392, '2010-10-21', 1237
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
44397, '2010-10-21', 1237
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
54321, '2016-06-18', 1234
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
54324, '2016-06-18', 1234
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
54325, '2016-06-18', 1234
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
59237, '2010-02-14', 1237
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
61353, '2013-01-28', 1245
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
61354, '2013-01-28', 1245
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
61367, '2012-07-30', 1246
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
61369, '2012-07-30', 1246
);

INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES(
61388, '2010-01-25', 1239
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
102, 'TAMI', 'DAWSON', '2632 TAKLI CIRCLE', 'FREDERICTON', 'NB', 'E4C 1X2', 11
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
103, 'CURT', 'KNIGHT', '4025 CORNELL COURT', 'HALIFAX', 'NS', 'E2T 1T2', 6
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
104, 'JAMAL', 'MELENDEZ', '788 EAST 145TH AVENUE', 'MONCTON', 'NB', 'E4T 1U2', 0
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
105, 'IVA', 'MCCLAIN', '6045 MUSKET BALL CIRCLE', 'SUMMIT', 'NS', 'E4C 1J2', 15
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
106, 'MIRANDA', 'PARKS', '4469 MAXWELL PLACE', 'GERMANTOWN', 'NB', 'E2H 1S2', 0
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
107, 'ROSARIO', 'ELLIOT', '7578 DANNER AVENUE', 'TRACEY', 'NB', 'E4C 1G2', 5
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
108, 'MATTIE', 'GUY', '4390 EVERGREEN STREET', 'LILY', 'NS', 'E7C 1F2', 0
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
109, 'CLINT', 'OCHOA', '1711 ELM STREET', 'GREENVILLE', 'NB', 'E2K 1H2', 10
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
110, 'LEWIS', 'ROSALES', '4524 SOUTHWIND CIRCLE', 'SUSSEX', 'NB', 'E7H 1X8', 0
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
111, 'STACY', 'MANN', '2789 EAST COOK AVENUE', 'DIEPPE', 'NB', 'E4C 1C2', 8
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
112, 'LUIS', 'TRUJILLO', '7267 MELVIN AVENUE', 'ST. ANDREWS', 'NB', 'E4A 1X2', 3
);

INSERT INTO MEMBERSHIP (MEM_NUM, FNAME, LNAME, STREET, CITY, PROV, POSTAL, BALANCE) VALUES(
113, 'MINNIE', 'GONZALES', '6430 VASILI DRIVE', 'SAINT JOHN', 'NB', 'E3P 1X5', 0
);

INSERT INTO RENTAL (RENT_NUM, RENT_DATE, MEM_NUM) VALUES(
1001, '2017-03-01', 103
);

INSERT INTO RENTAL (RENT_NUM, RENT_DATE, MEM_NUM) VALUES(
1002, '2016-12-12', 105
);

INSERT INTO RENTAL (RENT_NUM, RENT_DATE, MEM_NUM) VALUES(
1003, '2016-11-13', 102
);

INSERT INTO RENTAL (RENT_NUM, RENT_DATE, MEM_NUM) VALUES(
1004, '2017-03-10', 110
);

INSERT INTO RENTAL (RENT_NUM, RENT_DATE, MEM_NUM) VALUES(
1005, '2017-02-04', 111
);

INSERT INTO RENTAL (RENT_NUM, RENT_DATE, MEM_NUM) VALUES(
1006, '2017-02-25', 107
);

INSERT INTO RENTAL (RENT_NUM, RENT_DATE, MEM_NUM) VALUES(
1007, '2016-12-12', 104
);

INSERT INTO RENTAL (RENT_NUM, RENT_DATE, MEM_NUM) VALUES(
1008, '2017-01-01', 105
);

INSERT INTO RENTAL (RENT_NUM, RENT_DATE, MEM_NUM) VALUES(
1009, '2016-10-12', 111
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1001, 34342, 3.5, '2017-03-04', '2017-03-02', 3
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1001, 34366, 1.5, '2017-03-04', '2017-03-03', 1
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1001, 61353, 2, '2017-03-04', '2017-03-02', 1.5
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1002, 59237, 1.5, '2016-12-15', '2016-12-15', 1
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1003, 54325, 2, '2016-11-16', '2016-11-21', 1.5
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1003, 61369, 2, '2016-11-16', '2016-11-18', 1.5
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1003, 61388, 2, '2016-11-16', '2016-11-18', 1.5
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1004, 34341, 3.5, '2017-03-13', '2017-03-13', 3
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1004, 34367, 1.5, '2017-03-13', '2017-03-14', 1
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1004, 44392, 1.5, '2017-03-13', '2017-03-12', 1
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1005, 34342, 3.5, '2017-02-07', '2017-02-07', 3
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1005, 44397, 1.5, '2017-02-07', '2017-02-06', 1
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1006, 34366, 1.5, '2017-02-28', '2017-02-28', 1
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1006, 61367, 2, '2017-02-28', '', 1.5
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1007, 34368, 1.5, '2016-12-15', '', 1
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1008, 34369, 1.5, '2017-01-04', '2017-01-04', 1
);

INSERT INTO DETAILRENTAL (RENT_NUM, GC_NUM, FEE, DUE_DATE, RETURN_DATE, DAILY_LATE_FEE) VALUES(
1009, 54324, 2, '2016-10-15', '', 1.5
);

-- Question 3

COMMIT;

-- Question 4

UPDATE GAME SET YEAR = 2013 WHERE GA_NUM = 1245;

-- Question 5

UPDATE GAME SET PRICE_CODE = 4 WHERE GENRE = 'SIMULATION';

-- Question 6

UPDATE PRICE SET RENT_FEE = (RENT_FEE + 0.50);

-- Question 7

COMMIT;

-- PROJECT 2

-- Question 1

ALTER TABLE DetailRental ADD DAYS_LATE NUMBER(4) NULL;

-- Question 2

ALTER TABLE GameCopy ADD GA_STATUS CHAR(4) DEFAULT 'IN' NOT NULL;
ALTER TABLE GameCopy ADD CONSTRAINT CHK_GA_STATUS CHECK (GA_STATUS IN('IN', 'OUT', 'LOST'));

-- Question 3

UPDATE GAMECOPY SET GA_STATUS = 'OUT' WHERE GC_NUM IN(SELECT GC_NUM FROM DETAILRENTAL WHERE RETURN_DATE IS NULL);

-- Question 4

ALTER TABLE PRICE ADD RENT_DAYS NUMBER(2) DEFAULT 3 NOT NULL;

-- Question 5

UPDATE PRICE SET RENT_DAYS = 5 WHERE PRICE_CODE = 1;
UPDATE PRICE SET RENT_DAYS = 3 WHERE PRICE_CODE = 2;
UPDATE PRICE SET RENT_DAYS = 5 WHERE PRICE_CODE = 3;
UPDATE PRICE SET RENT_DAYS = 7 WHERE PRICE_CODE = 4;

-- Question 6

COLUMN "Game Number" FORMAT A20
SELECT game.GA_NUM AS "Game Number", game.TITLE AS "TITLE", (SELECT COUNT(*) FROM GAMECOPY WHERE GA_NUM = game.GA_NUM) AS "Inventory" FROM GAME ORDER BY GA_NUM ASC;

-- Question 7

SELECT game.GA_NUM AS "Game Number", game.TITLE AS "TITLE", (SELECT COUNT(*) FROM GAMECOPY WHERE GA_NUM = game.GA_NUM AND GA_STATUS = 'IN') AS "Inventory" FROM GAME ORDER BY GA_NUM ASC;

-- Question 8

CREATE SEQUENCE SEQ_GAME_COPY
START WITH 70000
INCREMENT BY 1
NOCACHE;

CREATE SEQUENCE SEQ_RENT_NUM
START WITH 1200
INCREMENT BY 1
NOCACHE;

-- Question 9

CREATE OR REPLACE PROCEDURE PRC_ADD_GAMECOPY(v_game_number NUMBER)

AS

v_ncopies NUMBER(1);
v_date DATE;
v_seqval NUMBER;
v_game_title VARCHAR(80);
lv_errnum VARCHAR(20);
lv_errmsg VARCHAR(200);

BEGIN

SELECT COUNT(*) into v_ncopies FROM gamecopy WHERE ga_num = v_game_number;

IF v_ncopies = 0 THEN
DBMS_OUTPUT.PUT_LINE('Game number does not exist.');

ELSE 

v_seqval := SEQ_GAME_COPY.NEXTVAL;
SELECT SYSDATE INTO v_date FROM DUAL;
SELECT title INTO v_game_title FROM GAME WHERE ga_num = v_game_number;
INSERT INTO GAMECOPY (GC_NUM, INDATE, GA_NUM) VALUES (v_seqval, v_date, v_game_number);
DBMS_OUTPUT.PUT_LINE('Added Copy Number: ' || v_seqval || ' for game ' || v_game_title);

END IF;

EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('You are attempting to store duplicate values in a column with unique constraint.');

WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No data was found according to that criteria.');

WHEN ZERO_DIVIDE THEN
DBMS_OUTPUT.PUT_LINE('You are trying to divide by zero and it is not allowed.');

WHEN INVALID_NUMBER THEN
DBMS_OUTPUT.PUT_LINE('Data entered is not a valid number.');

WHEN VALUE_ERROR THEN
DBMS_OUTPUT.PUT_LINE('Arithmetic, conversion, truncation, or size-constraint error.');

WHEN OTHERS THEN
lv_errnum := SQLCODE;
lv_errmsg := SUBSTR(SQLERRM, 1,80);
DBMS_OUTPUT.PUT_LINE('Error occurred:');
DBMS_OUTPUT.PUT_LINE('Number: ' || lv_errnum);
DBMS_OUTPUT.PUT_LINE('Message abstract: ' || lv_errmsg);

END;

/

-- Question 10

CREATE OR REPLACE PROCEDURE PRC_MEM_INFO(v_mem_number NUMBER)

AS

lv_errnum VARCHAR(20);
lv_errmsg VARCHAR(200);
v_member_exist NUMBER(1);
v_fullname VARCHAR(120);
v_address VARCHAR(120);
v_postal_code VARCHAR(10);
MEMBER_NOT_FOUND EXCEPTION;

BEGIN

SELECT COUNT(*) INTO v_member_exist FROM membership WHERE mem_num = v_mem_number;

IF v_member_exist = 0 THEN

RAISE MEMBER_NOT_FOUND;

ELSE
SELECT (lname || ', ' || fname), street, postal INTO
v_fullname, v_address, v_postal_code FROM membership WHERE mem_num = v_mem_number;

DBMS_OUTPUT.PUT_LINE(v_fullname);
DBMS_OUTPUT.PUT_LINE(v_address || '    ' || v_postal_code);

END IF;

EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('You are attempting to store duplicate values in a column with unique constraint.');

WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No data was found according to that criteria.');

WHEN ZERO_DIVIDE THEN
DBMS_OUTPUT.PUT_LINE('You are trying to divide by zero and it is not allowed.');

WHEN INVALID_NUMBER THEN
DBMS_OUTPUT.PUT_LINE('Data entered is not a valid number.');

WHEN VALUE_ERROR THEN
DBMS_OUTPUT.PUT_LINE('Arithmetic, conversion, truncation, or size-constraint error.');

WHEN MEMBER_NOT_FOUND THEN
DBMS_OUTPUT.PUT_LINE('Member with that number does not exist.');

WHEN OTHERS THEN
lv_errnum := SQLCODE;
lv_errmsg := SUBSTR(SQLERRM, 1,80);
DBMS_OUTPUT.PUT_LINE('Error occurred:');
DBMS_OUTPUT.PUT_LINE('Number: ' || lv_errnum);
DBMS_OUTPUT.PUT_LINE('Message abstract: ' || lv_errmsg);

END;

/

-- Question 11

CREATE OR REPLACE PROCEDURE PRC_NEW_RENTAL(v_membership_number NUMBER)

AS

v_balance membership.balance%type;
v_partten VARCHAR(80);
lv_errnum VARCHAR(20);
lv_errmsg VARCHAR(120);
MEMBER_NOT_FOUND EXCEPTION;
v_fullname VARCHAR(120);
v_address VARCHAR(120);
v_postal_code VARCHAR(10);
v_member_exist NUMBER(1);
v_date DATE;
v_seqrentval NUMBER;

BEGIN


SELECT COUNT(*) INTO v_member_exist FROM membership WHERE mem_num = v_membership_number;

IF v_member_exist = 0 THEN

RAISE MEMBER_NOT_FOUND;

ELSE
SELECT (lname || ', ' || fname), street, postal INTO
v_fullname, v_address, v_postal_code FROM membership WHERE mem_num = v_membership_number;

SELECT balance INTO v_balance FROM membership WHERE mem_num = v_membership_number;

DBMS_OUTPUT.PUT_LINE(v_fullname);
DBMS_OUTPUT.PUT_LINE(v_address || '    ' || v_postal_code);
DBMS_OUTPUT.PUT_LINE('Balance: $' || v_balance);

v_seqrentval := SEQ_RENT_NUM.NEXTVAL;
SELECT SYSDATE INTO v_date FROM DUAL;

INSERT INTO RENTAL (rent_num, rent_date, mem_num) VALUES (v_seqrentval, v_date,v_membership_number);

END IF;


EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('You are attempting to store duplicate values in a column with unique constraint.');

WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No data was found according to that criteria.');

WHEN ZERO_DIVIDE THEN
DBMS_OUTPUT.PUT_LINE('You are trying to divide by zero and it is not allowed.');

WHEN INVALID_NUMBER THEN
DBMS_OUTPUT.PUT_LINE('Data entered is not a valid number.');

WHEN VALUE_ERROR THEN
DBMS_OUTPUT.PUT_LINE('Arithmetic, conversion, truncation, or size-constraint error.');

WHEN MEMBER_NOT_FOUND THEN
DBMS_OUTPUT.PUT_LINE('Member with that number does not exist.');

WHEN OTHERS THEN
lv_errnum := SQLCODE;
lv_errmsg := SUBSTR(SQLERRM, 1,80);
DBMS_OUTPUT.PUT_LINE('Error occurred:');
DBMS_OUTPUT.PUT_LINE('Number: ' || lv_errnum);
DBMS_OUTPUT.PUT_LINE('Message abstract: ' || lv_errmsg);

END;

/

-- Question 12

CREATE OR REPLACE PROCEDURE PRC_NEW_DETAIL (v_gameNumber NUMBER)

AS

v_gameExists NUMBER;
lv_errnum VARCHAR2(20);
lv_errmsg VARCHAR2(120);
GAME_NOT_FOUND EXCEPTION;

v_gaNum NUMBER;
v_gaStatus gamecopy.ga_status%type;
v_gcAvailable NUMBER;
v_gcDueDate detailrental.due_date%type;
v_isIn gamecopy.ga_status%type;
v_singleGcNum gamecopy.gc_num%type;
v_gameCopyNumber NUMBER;

v_rentFee price.rent_fee%type;
v_dailyLateFee price.daily_late_fee%type;
v_rentDays price.rent_days%type;
v_dueDate DATE;

v_rent_days price.rent_days%type;
due_date detailrental.due_date%type;
v_rentNum NUMBER;
v_title game.title%type;

CURSOR SHOW_DUE_DATES IS SELECT due_date FROM DETAILRENTAL WHERE gc_num IN(SELECT gc_num FROM gamecopy WHERE ga_num = v_gameNumber);

BEGIN

SELECT COUNT(*) INTO v_gameExists FROM GAME WHERE ga_num = v_gameNumber;

IF v_gameExists = 0 THEN

RAISE GAME_NOT_FOUND;

ELSE

	SELECT title INTO v_title FROM GAME WHERE ga_num = v_gameNumber;

	SELECT COUNT(*) INTO v_gcAvailable FROM gamecopy WHERE ga_num = v_gameNumber AND ga_status = 'IN';
	
	IF v_gcAvailable = 0 THEN
	
	DBMS_OUTPUT.PUT_LINE('No game copies are available for rental at this time.');
	
	OPEN SHOW_DUE_DATES;
	
		DBMS_OUTPUT.PUT_LINE('Expected due dates for return:');
	
		LOOP
		FETCH SHOW_DUE_DATES INTO v_gcDueDate;
		EXIT WHEN SHOW_DUE_DATES%NOTFOUND;		
		DBMS_OUTPUT.PUT_LINE(v_gcDueDate);		
		END LOOP;
	
	CLOSE SHOW_DUE_DATES;
	
	ELSE
	
		SELECT gc_Num into v_singleGcNum FROM GAMECOPY where ga_num = v_gameNumber AND ga_status = 'IN' AND ROWNUM = 1;
		
		SELECT rent_fee, daily_late_fee, rent_days INTO v_rentFee, v_dailyLateFee, v_rentDays FROM PRICE where price_code = (SELECT price_code FROM game WHERE ga_num = v_gameNumber);
		v_dueDate := SYSDATE + v_rentDays;
		
		v_rentNum := SEQ_RENT_NUM.CURRVAL;
		
		INSERT INTO DETAILRENTAL (rent_num, gc_num, fee, due_date, return_date, daily_late_fee)
		VALUES (v_rentNum, v_singleGcNum, v_rentFee, v_dueDate, null, v_dailyLateFee);
		
		UPDATE gamecopy SET ga_status = 'OUT' WHERE gc_num = v_singleGcNum;
		
		DBMS_OUTPUT.PUT_LINE('Rental number: #' || v_rentNum);
		DBMS_OUTPUT.PUT_LINE('Game copy: #' || v_singleGcNum || '		Title: ' || v_title);
		DBMS_OUTPUT.PUT_LINE('Rental fee: $' || v_rentFee || '		Late Fee: $' || v_dailyLateFee);
		DBMS_OUTPUT.PUT_LINE('Due back in ' || v_rentDays || ' days - ' || v_dueDate);
		
	
	END IF;

END IF;

EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('You are attempting to store duplicate values in a column with unique constraint.');

WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No data was found according to that criteria.');

WHEN ZERO_DIVIDE THEN
DBMS_OUTPUT.PUT_LINE('You are trying to divide by zero and it is not allowed.');

WHEN INVALID_NUMBER THEN
DBMS_OUTPUT.PUT_LINE('Data entered is not a valid number.');

WHEN VALUE_ERROR THEN
DBMS_OUTPUT.PUT_LINE('Arithmetic, conversion, truncation, or size-constraint error.');

WHEN GAME_NOT_FOUND THEN
DBMS_OUTPUT.PUT_LINE('Game with number '|| v_gameNumber ||' does not exist.');

WHEN OTHERS THEN
lv_errnum := SQLCODE;
lv_errmsg := SUBSTR(SQLERRM, 1,80);
DBMS_OUTPUT.PUT_LINE('Error occurred:');
DBMS_OUTPUT.PUT_LINE('Number: ' || lv_errnum);
DBMS_OUTPUT.PUT_LINE('Message abstract: ' || lv_errmsg);

END;

/

-- Question 13

@gamerental

-- Question 14

-- Question 15

CREATE OR REPLACE PROCEDURE PRC_RETURN_GAME(v_gcNum NUMBER)

AS

lv_errnum VARCHAR2(80);
lv_errmsg VARCHAR2(120);
v_gameExists NUMBER;
GAME_NOT_FOUND EXCEPTION;
v_onlyOneCopy NUMBER;
TOO_MANY_GAMES EXCEPTION;

BEGIN

SELECT COUNT(*) INTO v_gameExists FROM DETAILRENTAL WHERE gc_num = v_gcNum AND return_date IS NULL;

IF v_gameExists = 0 THEN

RAISE GAME_NOT_FOUND;

ELSE

SELECT COUNT(*) INTO v_onlyOneCopy FROM DETAILRENTAL WHERE gc_num = v_gcNum AND return_date IS NULL;

	IF v_onlyOneCopy = 1 THEN
	
	UPDATE DETAILRENTAL SET RETURN_DATE = SYSDATE WHERE gc_num = v_gcNum;

	UPDATE GAMECOPY SET GA_STATUS = 'IN' WHERE gc_num = v_gcNum;
	
	DBMS_OUTPUT.PUT_LINE('GAME SUCCESSFULLY RETURNED');
	
	ELSE
	
	RAISE TOO_MANY_GAMES;
	
	END IF;

END IF;

EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
DBMS_OUTPUT.PUT_LINE('You are attempting to store duplicate values in a column with unique constraint.');

WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No data was found according to that criteria.');

WHEN GAME_NOT_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No game with ID ' || v_gcNum || ' was found.');

WHEN TOO_MANY_GAMES THEN
DBMS_OUTPUT.PUT_LINE('The game with ID ' || v_gcNum || ' has multiple outstanding rentals.');

WHEN ZERO_DIVIDE THEN
DBMS_OUTPUT.PUT_LINE('You are trying to divide by zero and it is not allowed.');

WHEN INVALID_NUMBER THEN
DBMS_OUTPUT.PUT_LINE('Data entered is not a valid number.');

WHEN VALUE_ERROR THEN
DBMS_OUTPUT.PUT_LINE('Arithmetic, conversion, truncation, or size-constraint error.');

WHEN OTHERS THEN
lv_errnum := SQLCODE;
lv_errmsg := SUBSTR(SQLERRM, 1,80);
DBMS_OUTPUT.PUT_LINE('Error occurred:');
DBMS_OUTPUT.PUT_LINE('Number: ' || lv_errnum);
DBMS_OUTPUT.PUT_LINE('Message abstract: ' || lv_errmsg);

END;

/

-- Question 16

CREATE OR REPLACE TRIGGER TRG_LATE_RETURN
BEFORE UPDATE
OF RETURN_DATE, DUE_DATE
ON DETAILRENTAL
For Each ROW

DECLARE

v_daysLate NUMBER(4);

BEGIN

IF :NEW.RETURN_DATE IS NULL THEN
v_daysLate := null;
END IF;

IF :NEW.RETURN_DATE <= :NEW.DUE_DATE THEN
v_daysLate := 0;
END IF;

IF :NEW.RETURN_DATE > :NEW.DUE_DATE THEN
v_daysLate := :NEW.RETURN_DATE - :NEW.DUE_DATE;
END IF;

:NEW.DAYS_LATE := v_daysLate;

END;

/

-- Question 16 IF DUE DATE OR EARLIER

UPDATE DETAILRENTAL SET RETURN_DATE = '2017-01-04' WHERE RENT_NUM = 1008;

UPDATE DETAILRENTAL SET RETURN_DATE = '2017-01-03' WHERE RENT_NUM = 1008;

-- Question 16 IF NULL

UPDATE DETAILRENTAL SET RETURN_DATE = '' WHERE RENT_NUM = 1008;

-- Question 16 IF RETURN DATE LATER

UPDATE DETAILRENTAL SET RETURN_DATE = '2017-01-10' WHERE RENT_NUM = 1008;

-- Question 16 DUE DATE CHANGE

UPDATE DETAILRENTAL SET DUE_DATE = '2017-01-12' WHERE RENT_NUM = 1008;

UPDATE DETAILRENTAL SET DUE_DATE = '2017-01-08' WHERE RENT_NUM = 1008;

UPDATE DETAILRENTAL SET DUE_DATE = '2017-01-10' WHERE RENT_NUM = 1008;